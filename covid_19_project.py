# -*- coding: utf-8 -*-
"""COVID-19 Project.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1tsDTK-R4x1vie5_YIQN7vWeY7e0jzwT_

# Collect and Explore Data of Covid-19 for USA
"""

!pip install COVID19Py

import COVID19Py
import pandas as pd
import numpy as np

# collect data of Covid19 in USA
covid19 = COVID19Py.COVID19(data_source="csbs")
latest = covid19.getLatest()
latest

US_data = covid19.getAll(timelines=True)

# get data of covid19 for US counties 
data_county = US_data['locations']
data_county

"""By looking through data of covid19 for US Counties, I want to extract basic information about US counties such as county name, latitude, longitude, coutry and province(state) and extract information about covid19 for each US counties such as confirmed cases of covid19, deaths cases of covid19 and last_updated date"""

# covert json's format into dataframe 
  covid19_us_data = pd.DataFrame(columns = ['county' , 'latitude', 'longitude', 'country' , 'datetime', 'confirmed', 'deaths', 'recovered', 'province'])
  for county in data_county:
    covid19_us_data = covid19_us_data.append({'county' : county['county'], 'latitude' : county['coordinates']['latitude'] ,'longitude': county['coordinates']['longitude'], 
                                              'country': county['country'], 'datetime': county['last_updated'],'confirmed':county['latest']['confirmed'], 'deaths': county['latest']['deaths'], 'recovered': county['latest']['recovered'],
                                              'province': county['province']},ignore_index=True)

# explore data structure by looking through column names, dimemsions, data type
covid19_us_data.head()

covid19_us_data.columns

covid19_us_data.info()

covid19_us_data.shape

# by looking at data structure, some columns should be numeric such as latitude, longitude, confirmed, deaths and recovered
covid19_us_data['latitude'] = pd.to_numeric(covid19_us_data['latitude'])
covid19_us_data['longitude'] = pd.to_numeric(covid19_us_data['longitude'])
covid19_us_data['confirmed'] = pd.to_numeric(covid19_us_data['confirmed'])
covid19_us_data['deaths'] = pd.to_numeric(covid19_us_data['deaths'])
covid19_us_data['recovered'] = pd.to_numeric(covid19_us_data['recovered'])
#covid19_us_data.iloc[:,[1,2,5,6,7]] = covid19_us_data.iloc[:,[1,2,5,6,7]].apply(pd.to_numeric,axis = 1)

# install fip code for each US county
!pip install addfips

# create new column called fip repect with US county in the covid19_us_data
import addfips
af = addfips.AddFIPS()
for i in range(len(covid19_us_data)):
  covid19_us_data.loc[i,'fip']= af.get_county_fips(county = covid19_us_data['county'][i] ,state =covid19_us_data['province'][i])
covid19_us_data.head()

covid19_us_data = covid19_us_data[covid19_us_data['province'] != 'US Military']

from urllib.request import urlopen
import json
with urlopen('https://raw.githubusercontent.com/plotly/datasets/master/geojson-counties-fips.json') as response:
    counties = json.load(response)

# create new column called us_state_abbrev
us_state_abbrev = {
    'Alabama': 'AL',
    'Alaska': 'AK',
    'American Samoa': 'AS',
    'Arizona': 'AZ',
    'Arkansas': 'AR',
    'California': 'CA',
    'Colorado': 'CO',
    'Connecticut': 'CT',
    'Delaware': 'DE',
    'District of Columbia': 'DC',
    'Florida': 'FL',
    'Georgia': 'GA',
    'Guam': 'GU',
    'Hawaii': 'HI',
    'Idaho': 'ID',
    'Illinois': 'IL',
    'Indiana': 'IN',
    'Iowa': 'IA',
    'Kansas': 'KS',
    'Kentucky': 'KY',
    'Louisiana': 'LA',
    'Maine': 'ME',
    'Maryland': 'MD',
    'Massachusetts': 'MA',
    'Michigan': 'MI',
    'Minnesota': 'MN',
    'Mississippi': 'MS',
    'Missouri': 'MO',
    'Montana': 'MT',
    'Nebraska': 'NE',
    'Nevada': 'NV',
    'New Hampshire': 'NH',
    'New Jersey': 'NJ',
    'New Mexico': 'NM',
    'New York': 'NY',
    'North Carolina': 'NC',
    'North Dakota': 'ND',
    'Northern Mariana Islands':'MP',
    'Ohio': 'OH',
    'Oklahoma': 'OK',
    'Oregon': 'OR',
    'Pennsylvania': 'PA',
    'Puerto Rico': 'PR',
    'Rhode Island': 'RI',
    'South Carolina': 'SC',
    'South Dakota': 'SD',
    'Tennessee': 'TN',
    'Texas': 'TX',
    'Utah': 'UT',
    'Vermont': 'VT',
    'US Virgin Islands': 'VI',
    'Virginia': 'VA',
    'Washington': 'WA',
    'West Virginia': 'WV',
    'Wisconsin': 'WI',
    'Wyoming': 'WY',
    'Navajo Nation': 'AZ'
}
covid19_us_data['state'] = covid19_us_data['province'].apply(lambda x: us_state_abbrev[x])
covid19_us_data.head()

"""# **Data analysis and visualization**

**Variables:**

*   county: US county names that have covid19 confirmed and deaths cases
*   latitude: latitudes of US counties that have covid19 confirmed and deaths cases
*   longitude: longitudes of US counties that have covid19 confirmed and death cases
*   country: United States
*   datetime: last_updated datetime
*   confirmed: the number of covid19 confirmed cases for each US county
*   deaths: the number of covid19 deaths cases for each US county
*   recovered: the number of people recivered from covid19 for each US county
*   provice: US state that each county belongs to
*   fip: fip code assigned into each US county
*   state: US state abbreviation that each US country belongs to
"""

# plot the distribution of covid19 confirmed cases in US map based on fip of counties
from urllib.request import urlopen
import json
with urlopen('https://raw.githubusercontent.com/plotly/datasets/master/geojson-counties-fips.json') as response:
    counties = json.load(response)
import plotly.express as px
import matplotlib.pyplot as plt 
fig = px.choropleth_mapbox(covid19_us_data, geojson=counties, locations='fip', color= 'confirmed',
                           color_continuous_scale="Rainbow",
                           range_color=(0, 1000),
                           mapbox_style="carto-positron",
                           zoom=3.2, center = {"lat": 37.0902, "lon": -95.7129},
                           opacity=0.5,
                           labels={'confirmed':'The number of confrimed covid19 cases'},
                           )
fig.update_layout(margin={"r":0,"t":0,"l":0,"b":0})
fig.show()

#plot bubble maple of the distribution of covid19 confirmed cases in US map
import plotly.express as px
fig = px.scatter_geo(covid19_us_data, lat = 'latitude', lon = 'longitude', color = 'province',
                     hover_name="province", size="confirmed",
                     projection="albers usa")
fig.update_layout(
        title_text = 'Distribution of covid19 confirmed cases in USA',
        showlegend = True,
        geo = dict(
            scope = 'usa',
            landcolor = 'rgb(217, 217, 217)',
        )
    )
fig.show()

# plot buble map of the distribution of covid19 confirmed cases in US map
import plotly.express as px
fig = px.scatter_geo(covid19_us_data, lat = 'latitude', lon = 'longitude', color = 'province',
                     hover_name="province", size="deaths",
                     projection="albers usa")
fig.update_layout(
        title_text = 'Distribution of covid19 deaths cases in USA',
        showlegend = True,
        geo = dict(
            scope = 'usa',
        )
    )
fig.show()

covid19_us_data.head()

covid19_us_states = covid19_us_data.groupby('state').agg('sum')

covid19_us_states = covid19_us_states[['confirmed','deaths','recovered']]

covid19_us_states =covid19_us_states.reset_index()

covid19_us_states.head()

def confirmed_case_category(n):
  if n >= 50000:
    return '> 50000'
  elif n >= 10000 and n < 50000:
    return '> 10000'
  elif n >= 1000 and n < 10000:
    return '> 1000' 
  else:
    return '< 1000'

covid19_us_states['confirmed_cases_category'] = covid19_us_states['confirmed'].apply(lambda x: confirmed_case_category(x))

covid19_us_states.head()

covid19_us_states['confirmed_cases_category'] = pd.Categorical(covid19_us_states['confirmed_cases_category'], ordered=True,
                   categories=['< 1000', '> 1000', '> 10000','> 50000'])

covid19_us_states.dtypes

covid19_us_states.head()

covid19_us_states['confirmed_cases_category'].unique()

import plotly.express as px
import matplotlib.pyplot as plt 
fig = px.choropleth(covid19_us_states, color='confirmed', color_continuous_scale="Rainbow",
                    locations='state', locationmode="USA-states",scope="usa")
fig.update_layout(margin={"r":0,"t":0,"l":0,"b":0})
fig.show()

import plotly.express as px
import matplotlib.pyplot as plt 
fig = px.choropleth(covid19_us_states, color='deaths', color_continuous_scale="reds",
                    locations='state', locationmode="USA-states",scope="usa")
fig.update_layout(margin={"r":0,"t":0,"l":0,"b":0})
fig.show()

covid19_us_states = covid19_us_data.groupby(['state','province']).agg('sum')

covid19_us_states = covid19_us_states[['confirmed','deaths','recovered']]

covid19_us_states =covid19_us_states.reset_index()

covid19_us_states.head()

import addfips
af = addfips.AddFIPS()
for i in range(len(covid19_us_states)):
  covid19_us_states.loc[i,'fip']= af.get_state_fips(state =covid19_us_states['province'][i])

covid19_us_states['confirmed_cases_category'] = covid19_us_states['confirmed'].apply(lambda x: confirmed_case_category(x))

covid19_us_states.head()

import seaborn as sns
plt.figure(figsize = (10,6))
sns.countplot(x = 'confirmed_cases_category', data = covid19_us_states ).set_title('The number of US States')

covid19_us_top10_states = covid19_us_states.sort_values(by = 'confirmed', ascending = False).head(10)

covid19_us_top10_states.head()

plt.figure(figsize = (10,15))
fig = sns.barplot( x = 'confirmed', y = 'province', data = covid19_us_top10_states).set_title('Top 10 US states affected by Covid19 in term of confirmed cases ')

covid19_us_top10deaths_states = covid19_us_states.sort_values(by = 'deaths', ascending = False).head(10)

plt.figure(figsize = (10,15))
fig = sns.barplot( x = 'deaths', y = 'province', data = covid19_us_top10deaths_states).set_title('Top 10 states affected by Covid19 in term of deaths cases ')

covid19_NY_data = covid19_us_data[covid19_us_data['province'] == 'New York']

import plotly.express as px
import matplotlib.pyplot as plt 
fig = px.choropleth_mapbox(covid19_NY_data, geojson=counties, locations='fip', color= 'confirmed',
                           color_continuous_scale="Rainbow",
                           range_color=(0, 1000),
                           mapbox_style="carto-positron",
                           zoom=5.5, center = {"lat": 43.084961, "lon": -75.653375},
                           opacity=0.5,
                           labels={'confirmed':'The number of confrimed covid19 cases'})
fig.update_layout(margin={"r":0,"t":0,"l":0,"b":0})
fig.show()

import plotly.express as px
import matplotlib.pyplot as plt 
fig = px.choropleth_mapbox(covid19_NY_data, geojson=counties, locations='fip', color= 'deaths',
                           color_continuous_scale="Rainbow",
                           range_color=(0, 10),
                           mapbox_style="carto-positron",
                           zoom=5.5, center = {"lat": 43.084961, "lon": -75.653375},
                           opacity=0.5,
                           labels={'confirmed':'The number of confrimed covid19 cases'})
fig.update_layout(margin={"r":0,"t":0,"l":0,"b":0})
fig.show()

covid19_jhu = COVID19Py.COVID19(data_source="jhu")

data = covid19_jhu.getAll(timelines=True)

location = data['locations']

def get_country_data(x):
  country = []
  for lo in location:
    if lo['country_code'] == x:
      country.append(lo)
  return country

location_US = get_country_data('US')

timeline_confirmed = location_US[0]['timelines']['confirmed']['timeline']
timeline_deaths = location_US[0]['timelines']['deaths']['timeline']

import pandas as pd
US_covid19_timeline_confirmed = pd.DataFrame(list(timeline_confirmed.items()),columns = ['timeline','confirmed'])
US_covid19_timeline_deaths = pd.DataFrame(list(timeline_deaths.items()),columns = ['timeline','deaths'])

US_covid19_timeline_confirmed['timeline'] = pd.to_datetime(US_covid19_timeline_confirmed['timeline'])

US_covid19_timeline_confirmed.head()

import numpy as np

def the_number_increase_daily(dataframe, colname):
  for i in range(len(dataframe)):
    if i < len(dataframe) - 1:
      dataframe.loc[i+1,'daily_increase'] = dataframe.loc[i+1, colname] - dataframe.loc[i,colname]
    else: 
      dataframe.loc[0,'daily_increase'] = np.nan 
  return dataframe

US_covid19_timeline_confirmed = the_number_increase_daily(US_covid19_timeline_confirmed,'confirmed')

import seaborn as sns
import matplotlib.pyplot as plt
sns.set(style="whitegrid")
plt.figure(figsize=(20,9))
sns.lineplot(data= US_covid19_timeline_confirmed, x='timeline', y='confirmed',label = 'confirmed cases')

import plotly.express as px 
import seaborn as sns
import matplotlib.pyplot as plt
plt.figure(figsize=(20,15))
fig = px.line(US_covid19_timeline_confirmed, x='timeline', y='daily_increase',title = 'daily increasing confirmed cases in USA')
fig.update_xaxes(rangeslider_visible=True)

sns.set(style="whitegrid")
plt.figure(figsize=(20,9))
US_covid19_timeline_deaths['timeline'] = pd.to_datetime(US_covid19_timeline_deaths['timeline'])
sns.lineplot(data= US_covid19_timeline_deaths, x='timeline', y='deaths').set_title('covid19 deaths cases in USA from Jan 2020 to now')

covid19_world_confirmed_timeline = pd.DataFrame()
for country in location:
  covid19_country_confirmed_timeline = pd.DataFrame(list(country['timelines']['confirmed']['timeline'].items()),columns = ['timeline','confirmed'])
  covid19_country_confirmed_timeline['latitude'] = country['coordinates']['latitude']
  covid19_country_confirmed_timeline['longitude'] = country['coordinates']['longitude']
  covid19_country_confirmed_timeline['country'] = country['country']
  covid19_country_confirmed_timeline['country_code'] = country['country_code']
  covid19_world_confirmed_timeline = covid19_world_confirmed_timeline.append(covid19_country_confirmed_timeline)

covid19_world_confirmed_timeline.head()

covid19_world_confirmed_timeline.info()

!pip install pycountry-convert

import pycountry_convert as pc
def get_continent(country_code):
  if country_code =='VA':
    return 'Europe'
  if country_code =='TL':
    return 'Asia'
  else:
    continent_name = pc.country_alpha2_to_continent_code(country_code)
    country_continent_name = pc.convert_continent_code_to_continent_name(continent_name)
    return country_continent_name

covid19_world_confirmed_timeline = covid19_world_confirmed_timeline[covid19_world_confirmed_timeline['country_code'] !='XX']
covid19_world_confirmed_timeline = covid19_world_confirmed_timeline[covid19_world_confirmed_timeline['country_code'] !='EH']

covid19_world_confirmed_timeline['country_code'].unique()

covid19_world_confirmed_timeline['continent'] = covid19_world_confirmed_timeline['country_code'].apply(lambda x: get_continent(x))

covid19_world_confirmed_timeline['continent'].unique()

covid19_world_confirmed_timeline['latitude'] = pd.to_numeric(covid19_world_confirmed_timeline['latitude'])
covid19_world_confirmed_timeline['longitude'] = pd.to_numeric(covid19_world_confirmed_timeline['longitude'])
covid19_world_confirmed_timeline['timeline'] = pd.to_datetime(covid19_world_confirmed_timeline['timeline']).dt.strftime("%m-%d")

covid19_world_confirmed_timeline.head()

covid19_world_confirmed_timeline.info()

import plotly.express as px
fig = px.scatter_geo(covid19_world_confirmed_timeline, lat = 'latitude', lon = 'longitude', color = 'continent',
                     hover_name="country", size="confirmed",
                     animation_frame="timeline",
                     projection="natural earth")
fig.update_layout(
        title_text = 'Distribution of covid19 confirmed cases in the world from January to now',
        showlegend = True
    )
fig.show()

covid19_world_deaths_timeline = pd.DataFrame()
for country in location:
  covid19_country_deaths_timeline = pd.DataFrame(list(country['timelines']['deaths']['timeline'].items()),columns = ['timeline','deaths'])
  covid19_country_deaths_timeline['latitude'] = country['coordinates']['latitude']
  covid19_country_deaths_timeline['longitude'] = country['coordinates']['longitude']
  covid19_country_deaths_timeline['country'] = country['country']
  covid19_country_deaths_timeline['country_code'] = country['country_code']
  covid19_world_deaths_timeline = covid19_world_deaths_timeline.append(covid19_country_deaths_timeline)
covid19_world_deaths_timeline = covid19_world_deaths_timeline[covid19_world_deaths_timeline['country_code'] !='XX']
covid19_world_deaths_timeline = covid19_world_deaths_timeline[covid19_world_deaths_timeline['country_code'] !='EH']
covid19_world_deaths_timeline.loc[:,'continent'] = covid19_world_deaths_timeline.loc[:,'country_code'].apply(lambda x: get_continent(x))
covid19_world_deaths_timeline.loc[:,'latitude'] = pd.to_numeric(covid19_world_deaths_timeline.loc[:,'latitude'])
covid19_world_deaths_timeline.loc[:,'longitude'] = pd.to_numeric(covid19_world_deaths_timeline.loc[:,'longitude'])
covid19_world_deaths_timeline.loc[:,'timeline'] = pd.to_datetime(covid19_world_deaths_timeline.loc[:,'timeline']).dt.strftime("%m-%d")

import plotly.express as px
fig = px.scatter_geo(covid19_world_deaths_timeline, lat = 'latitude', lon = 'longitude', color = 'continent',
                     hover_name="country", size="deaths",
                     animation_frame="timeline",
                     projection="natural earth")
fig.update_layout(
        title_text = 'Distribution of covid19 deaths cases in the world from January to now',
        showlegend = True
    )
fig.show()